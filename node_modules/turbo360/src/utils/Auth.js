var Promise = require('bluebird')
var superagent = require('superagent')
var IndexDB = require('./IndexDB')

var Auth = function(config){
	var _config = config

	var login = function(params){ // email, password
		return new Promise(function(resolve, reject){
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}
			
			if (params == null){
				reject(new Error('Post parameters required.'))
				return
			}

			params['site'] = _config.site_id
			superagent
			.post(_config.base_url+'/auth/login')
			.send(params)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				console.log('LOGIN: '+JSON.stringify(response))
				var data = response.body
				if (data.confirmation != 'success'){
					var message = data.message || 'Login Failed'
					reject(new Error(message))
					return
				}

				var dbRef = IndexDB(_config)
				dbRef.dbTransaction(function(err, store){
					if (err){
						reject(err)
						return
					}

				    store.put({id:_config.site_id, token:data.token})
			    	var user = response.body.user || response.body.result
					resolve(user)
				})
			})
		})
	}

	var logout = function(){
		return new Promise(function(resolve, reject){
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			var dbRef = IndexDB(_config)
			dbRef.dbTransaction(function(err, store){
				if (err){
					reject(err)
					return
				}

			    var query = store.delete(_config.site_id)
			    query.onsuccess = function() {
			    	console.log('Token Removed')
					resolve(null)
			    }

			    query.onerror = function(event){
			    	reject(event.target)
			    }
			})
		})
	}

	var currentUser = function(){
		return new Promise(function(resolve, reject){
			var dbRef = IndexDB(_config)
			dbRef.dbTransaction(function(err, store){
				if (err){
					reject(err)
					return
				}

			    // Query the data
			    var query = store.get(_config.site_id)
			    query.onsuccess = function() {
			    	if (query.result == null){
			    		reject(new Error('Not Logged In'))
			    		return
			    	}

			    	superagent
			    	.get(_config.base_url+'/auth/currentuser')
			    	.query(null)
			    	.set('Accept', 'application/json')
			    	.set('turbo-token', query.result.token)
			    	.end(function(err, response){
			    		if (err){
			    			reject(err)
			    			return
			    		}

			    		if (response.body.confirmation != 'success'){
				    		reject(new Error(response.body.message))
			    			return
			    		}

			    		var user = response.body.user || response.body.result
				    	resolve(user)
			    	})
			    }

			    query.onerror = function(event){
			    	reject(event.target)
			    }
			})
		})
	}

	var createUser = function(params){ // email, password
		return new Promise(function(resolve, reject){
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}
			
			if (params == null){
				reject(new Error('Post parameters required.'))
				return
			}

			params['site'] = _config.site_id
			superagent.post(_config.base_url+'/auth/createuser')
			.send(params)
			.set('Accept', 'application/json')
			.end(function(err, response){
				if (err){
					reject(err)
					return
				}

				var data = response.body
				// console.log('CREATE USER: '+JSON.stringify(data))
				if (data.confirmation != 'success'){
					var message = data.message || 'Registration Failed'
					reject(new Error(message))
					return
				}

				var dbRef = IndexDB(_config)
				dbRef.dbTransaction(function(err, store){
					if (err){
						reject(err)
						return
					}

				    store.put({id:_config.site_id, token:data.token})
			    	var user = response.body.user || response.body.result
					resolve(user)
				})
			})
		})
	}

	var instance = {
		login: login,
		logout: logout,
		currentUser: currentUser,
		createUser: createUser
	}

	return instance
}

module.exports = Auth